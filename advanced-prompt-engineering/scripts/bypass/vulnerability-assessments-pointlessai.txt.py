import subprocess
import logging
from datetime import datetime
import schedule
import time

ZAP_PATH = '/path/to/zap.sh'
TARGET_URL = 'http://pointlessai.com'
OUTPUT_REPORT = 'zap_report.html'
LOG_FILE = 'zap_scan.log'
LOG_LEVEL = logging.DEBUG

logging.basicConfig(level=LOG_LEVEL, filename=LOG_FILE, filemode='a', format='%(name)s - %(levelname)s - %(message)s')

def run_zap_scan(target_url):
    try:
        logging.info('Initiating ZAP scan for URL: %s', target_url)
        command = [ZAP_PATH, '-daemon', '-quickurl', target_url, '-quickout', OUTPUT_REPORT]
        subprocess.run(command, check=True)
        logging.info('Scan completed successfully. Report generated at: %s', OUTPUT_REPORT)
    
    except subprocess.CalledProcessError as e:
        logging.error('Error occurred during ZAP scan: %s', e)
        raise

    except Exception as e:
        logging.error('Unexpected error occurred: %s', e)
        raise

def schedule_regular_assessments():
    schedule.every().monday.at("01:30").do(run_zap_scan, TARGET_URL)
    logging.info('Scheduled regular vulnerability assessments.')
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    logging.info('Vulnerability Assessment Job started on %s', datetime.now())
    schedule_regular_assessments()
