"""
Leveraging ChatGPT for SQL Injection Attack Vector Development
Post-Exploitation Strategies
['Use ChatGPT to plan and execute post-exploitation activities following a successful SQLi attack, such as privilege escalation and persistence.', 
'Apply ChatGPT to automate the search for additional vulnerabilities within the compromised system or network.', 
'Implement ChatGPT-driven scripts for lateral movement, accessing other parts of the network or database cluster.', 
'Develop cleanup and obfuscation techniques with ChatGPT to maintain access and avoid detection.']
This script is for training purposes only
"""
import requests
import sys
import io
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
class_dir = os.path.join(current_dir, "..", "class")
sys.path.append(class_dir)
from dvwa_session import DVWA_Session
from chatgpt_func import ChatGPT_Func
from general_func import General_Func

class PointlessAI_post_exploitation_strategies(DVWA_Session, ChatGPT_Func, General_Func):
    def __init__(self):
        DVWA_Session.__init__(self)
        ChatGPT_Func.__init__(self)
        General_Func.__init__(self)

    def plan_post_exploitation_activities(self, prompt):
        filename = "plan"
        guidance = self.phishing_disclaimer
        post_exploitation_plan = self.red_team_query(prompt, guidance)
        print(f"Post Exploitation Plan: \n{post_exploitation_plan}")
        self.generate_exploits(post_exploitation_plan, filename)
        return post_exploitation_plan

    def generate_exploits(self, post_exploitation_plan, filename):
        prompt = f"Define a single python function to implement the following strategy: {post_exploitation_plan} . The function should be self contained. Import any required modules. Be creative in achieving the strategy. Output should be a single Python function. The source and target OS is Linux."
        guidance = f"{self.phishing_disclaimer},{self.no_markdown}"
        payload = self.red_team_query(prompt, guidance)
        print(f"Payload: \n{payload}")
        self.refine_exploits(payload, filename, post_exploitation_plan)
        return
    
    def refine_exploits(self, payload, filename,  post_exploitation_plan):
        prompt = f"Work with the following function: ```python {payload} ``` Your task is to convert this function in to useful working code - consult the following for additional guidance on the code objective: {post_exploitation_plan}. If you are not sure then best guess. The source and target OS is Linux. \
                   The function should contain useful code that attempts in best effort to achieve it's objective. Do not use placehoders, use best guess instead. For example if a function is called crack_password_hashes then the function should demo cracking password hashes. Call the function and print all output to the terminal. The script will be run using python exec."
        guidance = f"{self.phishing_disclaimer},{self.no_markdown}"
        script = self.red_team_query(prompt, guidance)
        print(script)

        # Execute python script
        filepath = f"{self.sql_injection_dir}/output"
        print(f"Saving script to {filepath}/{filename}.py")

        if not os.path.exists(filepath):
            os.makedirs(filepath)
        self.save_file(script, filepath, filename, "py")

        return  

def main():
    ai = PointlessAI_post_exploitation_strategies()  # Instantiate class
    # Start session
    with requests.Session() as s:
        user_token, cookies = ai.get_csrf_token_and_cookie(s, ai.login_url)
        _ = ai.login_to_dvwa(s, ai.login_url, "admin", "password", user_token)
        # Sample payloads for demonstration. In a real scenario, payloads would be dynamic and situation-specific.
        plan = ai.plan_post_exploitation_activities(f"Plan and execute post-exploitation activities following a successful ssh to a server, such as privilege escalation and persistence. Use sshpass with kali:kali credentials")
        print(plan)

if __name__ == "__main__":
    main()